import telebot
from telebot import types
import conf


bot = telebot.TeleBot(conf.API_token)

#name = ''
#number = 79999999999
#count = 0
value = []

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    btn2 = types.KeyboardButton("–ü–æ–∫—É–ø–∫–∞")
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É [product_name], –∞ —Ç–∞–∫ –∂–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –ø–æ–∫—É–ø–∫—É".format(message.from_user), reply_markup=markup)

@bot.message_handler(content_types=['text'])
def func(message):
    if(message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        bot.send_message(message.from_user.id, text="[product_info]")
    elif(message.text == "–ü–æ–∫—É–ø–∫–∞"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        #btn1 = types.KeyboardButton("–§.–ò.–û. –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        #btn2 = types.KeyboardButton("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        #btn3 = types.KeyboardButton("–ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –°–î–≠–ö")
        #btn4 = types.KeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª—å–∫–æ–≤")
        #back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        #markup.add(btn1, btn2, btn3, btn4, back)
        bot.send_message(message.from_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Ç–æ—á–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=markup)
        bot.send_message(message.from_user.id, "1. –§.–ò.–û. –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        bot.register_next_step_handler(message, get_name)
    #elif (message.text == "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"):
    #    bot.send_message(message.chat.id, "–£ –º–µ–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏..")

    #elif message.text == "–ß—Ç–æ —è –º–æ–≥—É?":
    #    bot.send_message(message.chat.id, text="–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å —á–∏—Ç–∞—Ç–µ–ª—è–º–∏")

    #elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
    #    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #    button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    #    button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    #    markup.add(button1, button2)
    #    bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    else:
        bot.send_message(message.from_user.id, text="–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç")


def get_name(message):
    name = message.text
    value.append(name)
    bot.send_message(message.from_user.id, "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    bot.register_next_step_handler(message, get_number)
    print(f'STEP 1 get_name\nUSER: {message.from_user.username}\nvalue = {value}')

def get_number(message):
    #bot.send_message(message.from_user.id, "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    number = message.text
    #while True:
    if len(str(number)) == 11 and str(number)[0] in ('7','8'):
        #break
        bot.send_message(message.from_user.id, "3. –ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –°–î–≠–ö")
        bot.register_next_step_handler(message, get_address)
        value.append(number)
    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')
        bot.register_next_step_handler(message, get_number)


    print(f'STEP 2 get_number\nUSER: {message.from_user.username}\nvalue = {value}')


def get_address(message):
    #bot.send_message(message.from_user.id, "3. –ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –°–î–≠–ö")
    address = message.text
    value.append(address)
    bot.send_message(message.from_user.id, "3. –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ [product_name]")
    bot.register_next_step_handler(message, get_count)
    print(f'STEP 3 get_address\nUSER: {message.from_user.username}\nvalue = {value}')

def get_count(message):
    #bot.send_message(message.from_user.id, "3. –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ [product_name]")
    #bot.send_message(message.from_user.id, "–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏")
    count = message.text
    value.append(count)
    bot.register_next_step_handler(message, final_order)
    print(f'STEP 4 get_count\nUSER: {message.from_user.username}\nvalue = {value}')

def final_order(message):
    final_messege = f'''
    1: –§–ò–û = {value[0]}\n
    2: –ù–æ–º–µ—Ä = {value[1]}\n
    3: –ê–¥—Ä–µ—Å = {value[2]}\n
    4: –ö–æ–ª-–≤–æ = {value[3]}
    '''

    bot.send_message(message.from_user.id, f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n{final_messege}")

bot.polling(none_stop=True)